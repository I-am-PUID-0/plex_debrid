name: Docker Image CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    paths-ignore:
      - '**/README.md'
      - '.github/**'
      - '.gitattributes'
      - '.gitignore'

jobs:
  build-and-push:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, 'chore(main): release '))       
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
      repo_owner_lower: ${{ env.REPO_OWNER_LOWER }}
      repo_name: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/arm64,linux/arm/v7'
          cache-image: false
      
      - name: Extract version and set environment variables
        id: setup_env_vars
        run: |
          VERSION=$(grep -E '^version *= *' pyproject.toml | head -n 1 | cut -d '"' -f2)
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REPO_OWNER_LOWER=$REPO_OWNER_LOWER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Determine Docker tags
        id: determine_tags
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "DOCKER_TAGS=${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:${{ env.VERSION }},${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:latest,ghcr.io/${{ env.REPO_OWNER_LOWER }}/${{ env.REPO_NAME }}:${{ env.VERSION }},ghcr.io/${{ env.REPO_OWNER_LOWER }}/${{ env.REPO_NAME }}:latest" >> $GITHUB_ENV
          else
            echo "DOCKER_TAGS=${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:${{ env.BRANCH_NAME }},ghcr.io/${{ env.REPO_OWNER_LOWER }}/${{ env.REPO_NAME }}:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        id: build_push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false        
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=gha,scope=build-${{ github.ref_name }}
          cache-to: type=gha,scope=build-${{ github.ref_name }},mode=max
          tags: ${{ env.DOCKER_TAGS }}
          provenance: true
          sbom: true
          push: true
          
      - name: Add Job Summary for Build
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Build Version:** \`${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Git Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ env.DOCKER_TAGS }}\`" >> $GITHUB_STEP_SUMMARY         
          echo "**Build and Push Status:** ✅ Successful" >> $GITHUB_STEP_SUMMARY

  release:
    needs: build-and-push
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
    env:
      VERSION: ${{ needs.build-and-push.outputs.version }}
      REPO_OWNER_LOWER: ${{ needs.build-and-push.outputs.repo_owner_lower }}
      REPO_NAME: ${{ needs.build-and-push.outputs.repo_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
            if gh release view "${{ env.VERSION }}" --repo ${{ github.repository }}; then
              echo "Release already exists for version ${{ needs.build-and-push.outputs.version }}"
              echo "release_exists=true" >> $GITHUB_ENV
              echo "release_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Release does not exist for version ${{ needs.build-and-push.outputs.version }}"
              echo "release_exists=false" >> $GITHUB_ENV
              echo "release_exists=false" >> $GITHUB_OUTPUT
            fi
      - name: Create Release with CHANGELOG Notes
        if: env.release_exists == 'false'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            RELEASE_NOTES=$(sed -n '/^## \[[0-9]\+\.[0-9]\+\.[0-9]\+\](/,$p' CHANGELOG.md | sed -n '1!{/^## \[/q;p}')
            gh release create ${{ env.VERSION }} \
              --repo ${{ github.repository }} \
              --title "Release ${{ env.VERSION }}" \
              --notes "$RELEASE_NOTES" \
              --draft=false \
              --prerelease=false

      - name: Add Job Summary for Release
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Release Version:** \`${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release Status:** ${{ env.release_exists == 'false' && '✅ Created' || '⚠️ Skipped (Already Exists)' }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.release_exists }}" == "false" ]; then
            echo "**Release Notes:**" >> $GITHUB_STEP_SUMMARY
            sed -n '/^## \[[0-9]\+\.[0-9]\+\.[0-9]\+\](/,$p' CHANGELOG.md | sed -n '1!{/^## \[/q;p}' >> $GITHUB_STEP_SUMMARY
          fi

  announce:
    needs: [release, build-and-push]
    if: needs.release.outputs.release_exists == 'false' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Post announcement to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          VERSION: ${{ needs.build-and-push.outputs.version }}
        run: |
          RELEASE_NOTES=$(sed -n '/^## \[[0-9]\+\.[0-9]\+\.[0-9]\+\](/,$p' CHANGELOG.md | sed -n '1!{/^## \[/q;p}')
          ANNOUNCEMENT_BODY="<@&1360241608649605240> 🚀 **New Release: Version [${{ env.VERSION }}]**${RELEASE_NOTES}"
          ESCAPED_BODY=$(echo "$ANNOUNCEMENT_BODY" | jq -Rsa .)
          curl -H "Content-Type: application/json" \
               -d "{\"content\": $ESCAPED_BODY, \"flags\": 4}" \
               $DISCORD_WEBHOOK_URL
          
  update-pr-label:
    needs: release
    if: needs.release.outputs.release_exists == 'false' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Remove 'autorelease: pending' label from all merged PRs"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBERS=$(gh pr list --state merged --base main --json number,labels --jq '[.[] | select(.labels[].name == "autorelease: pending") | .number] | @sh')
          
          if [[ -n "$PR_NUMBERS" ]]; then
            for PR_NUMBER in $PR_NUMBERS; do
              PR_NUMBER=$(echo $PR_NUMBER | tr -d "'") # Remove quotes from jq output
              echo "Updating PR #$PR_NUMBER..."
              gh pr edit $PR_NUMBER --remove-label "autorelease: pending"
              gh pr edit $PR_NUMBER --add-label "autorelease: tagged"
              echo "Updated PR #$PR_NUMBER with 'autorelease: tagged'"
            done
          else
            echo "No merged PRs found with 'autorelease: pending' label."
          fi